{"ast":null,"code":"import axios from 'axios';\nimport _ from 'lodash'; // import { parse,compile } from 'path-to-regexp';\n\nimport CustomError from './CustomError'; // import { get } from './utils';\n\n/* 30 sec timeout */\n\naxios.defaults.timeout = 30000;\n/**\n * request\n */\n\nconst fetch = options => {\n  let {\n    url\n  } = options;\n  const {\n    data = {},\n    headers = {},\n    method\n  } = options; //   const token = _.get(get('user'), 'token');\n  //   if (token) {\n  //      headers.Authorization = `${token}`;\n  //   }\n\n  headers['Content-Type'] = 'application/json';\n  /* cache */\n\n  headers['Cache-Control'] = 'no-cache';\n  /* Clone request body data */\n\n  const cloneData = _.cloneDeep(data); // try {\n  //   let domin = '';\n  //   if (url.match(/[a-zA-z]+:\\/\\/[^/]*/)) {\n  //     const { 0: val } = url.match(/[a-zA-z]+:\\/\\/[^/]*/);\n  //     domin = val;\n  //     url = url.slice(domin.length);\n  //   }\n  //   const match = parse(url);\n  //   url = compile(url)(data);\n  //   _.forEach(match, item => {\n  //     if (item instanceof Object && item.name in cloneData) {\n  //       delete cloneData[item.name];\n  //     }\n  //   });\n  //   url = domin + url;\n  // } catch (e) {\n  //   console.log(e);\n  //   _.noop();\n  // }\n\n\n  switch (_.toLower(method)) {\n    case 'get':\n      return axios.get(url, {\n        params: cloneData,\n        headers\n      });\n\n    case 'delete':\n      return axios.delete(url, {\n        data: cloneData,\n        headers\n      });\n\n    case 'post':\n      return axios.post(url, cloneData, {\n        headers\n      });\n\n    case 'put':\n      return axios.put(url, cloneData, {\n        headers\n      });\n\n    case 'patch':\n      return axios.patch(url, cloneData, {\n        headers\n      });\n\n    default:\n      return axios(options);\n  }\n};\n/**\n * Default request function\n */\n\n\nexport default async function request(options) {\n  try {\n    const res = await fetch(options);\n\n    let data = _.get(res, 'data', {});\n    /* convert list to object */\n\n\n    if (_.isArray(data)) {\n      data = {\n        list: data\n      };\n    }\n\n    return data;\n  } catch (error) {\n    // throw new Error(error.message);\n    throw new CustomError(error); //   throw error;\n  }\n}","map":{"version":3,"sources":["/Users/shixt/Documents/user/最终项目/tasty-admin/src/Common/request.js"],"names":["axios","_","CustomError","defaults","timeout","fetch","options","url","data","headers","method","cloneData","cloneDeep","toLower","get","params","delete","post","put","patch","request","res","isArray","list","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,CAAP,MAAc,QAAd,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CACA;;AAEA;;AACAF,KAAK,CAACG,QAAN,CAAeC,OAAf,GAAyB,KAAzB;AAEA;AACA;AACA;;AACA,MAAMC,KAAK,GAAIC,OAAD,IAAa;AAEzB,MAAI;AAAEC,IAAAA;AAAF,MAAUD,OAAd;AACA,QAAM;AAAEE,IAAAA,IAAI,GAAG,EAAT;AAAaC,IAAAA,OAAO,GAAG,EAAvB;AAA2BC,IAAAA;AAA3B,MAAsCJ,OAA5C,CAHyB,CAKzB;AAEA;AACA;AACA;;AAEAG,EAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AAEA;;AACAA,EAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,UAA3B;AAEA;;AACA,QAAME,SAAS,GAAGV,CAAC,CAACW,SAAF,CAAYJ,IAAZ,CAAlB,CAjByB,CAmBzB;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AAEA,UAAQP,CAAC,CAACY,OAAF,CAAUH,MAAV,CAAR;AACA,SAAK,KAAL;AACE,aAAOV,KAAK,CAACc,GAAN,CAAUP,GAAV,EAAe;AAAEQ,QAAAA,MAAM,EAAEJ,SAAV;AAAqBF,QAAAA;AAArB,OAAf,CAAP;;AACF,SAAK,QAAL;AACE,aAAOT,KAAK,CAACgB,MAAN,CAAaT,GAAb,EAAkB;AAAEC,QAAAA,IAAI,EAAEG,SAAR;AAAmBF,QAAAA;AAAnB,OAAlB,CAAP;;AACF,SAAK,MAAL;AACE,aAAOT,KAAK,CAACiB,IAAN,CAAWV,GAAX,EAAgBI,SAAhB,EAA2B;AAAEF,QAAAA;AAAF,OAA3B,CAAP;;AACF,SAAK,KAAL;AACE,aAAOT,KAAK,CAACkB,GAAN,CAAUX,GAAV,EAAeI,SAAf,EAA0B;AAAEF,QAAAA;AAAF,OAA1B,CAAP;;AACF,SAAK,OAAL;AACE,aAAOT,KAAK,CAACmB,KAAN,CAAYZ,GAAZ,EAAiBI,SAAjB,EAA4B;AAAEF,QAAAA;AAAF,OAA5B,CAAP;;AACF;AACE,aAAOT,KAAK,CAACM,OAAD,CAAZ;AAZF;AAcD,CA7DD;AA+DA;AACA;AACA;;;AACA,eAAe,eAAec,OAAf,CAAwBd,OAAxB,EAAiC;AAE9C,MAAI;AACF,UAAMe,GAAG,GAAG,MAAMhB,KAAK,CAACC,OAAD,CAAvB;;AACA,QAAIE,IAAI,GAAGP,CAAC,CAACa,GAAF,CAAMO,GAAN,EAAW,MAAX,EAAmB,EAAnB,CAAX;AAEA;;;AACA,QAAIpB,CAAC,CAACqB,OAAF,CAAUd,IAAV,CAAJ,EAAqB;AACnBA,MAAAA,IAAI,GAAG;AAAEe,QAAAA,IAAI,EAAEf;AAAR,OAAP;AACD;;AAED,WAAOA,IAAP;AACD,GAVD,CAUE,OAAOgB,KAAP,EAAc;AAEd;AACA,UAAM,IAAItB,WAAJ,CAAgBsB,KAAhB,CAAN,CAHc,CAId;AACD;AACF","sourcesContent":["import axios from 'axios';\n\nimport _ from 'lodash';\n\n// import { parse,compile } from 'path-to-regexp';\nimport CustomError from './CustomError';\n// import { get } from './utils';\n\n/* 30 sec timeout */\naxios.defaults.timeout = 30000;\n\n/**\n * request\n */\nconst fetch = (options) => {\n\n  let { url } = options;\n  const { data = {}, headers = {}, method } = options;\n\n  //   const token = _.get(get('user'), 'token');\n\n  //   if (token) {\n  //      headers.Authorization = `${token}`;\n  //   }\n\n  headers['Content-Type'] = 'application/json';\n\n  /* cache */\n  headers['Cache-Control'] = 'no-cache';\n\n  /* Clone request body data */\n  const cloneData = _.cloneDeep(data);\n\n  // try {\n  //   let domin = '';\n\n  //   if (url.match(/[a-zA-z]+:\\/\\/[^/]*/)) {\n  //     const { 0: val } = url.match(/[a-zA-z]+:\\/\\/[^/]*/);\n\n  //     domin = val;\n  //     url = url.slice(domin.length);\n  //   }\n\n  //   const match = parse(url);\n\n  //   url = compile(url)(data);\n\n  //   _.forEach(match, item => {\n\n  //     if (item instanceof Object && item.name in cloneData) {\n  //       delete cloneData[item.name];\n  //     }\n  //   });\n  //   url = domin + url;\n\n  // } catch (e) {\n\n  //   console.log(e);\n  //   _.noop();\n  // }\n\n  switch (_.toLower(method)) {\n  case 'get':\n    return axios.get(url, { params: cloneData, headers });\n  case 'delete':\n    return axios.delete(url, { data: cloneData, headers });\n  case 'post':\n    return axios.post(url, cloneData, { headers });\n  case 'put':\n    return axios.put(url, cloneData, { headers });\n  case 'patch':\n    return axios.patch(url, cloneData, { headers });\n  default:\n    return axios(options);\n  }\n};\n\n/**\n * Default request function\n */\nexport default async function request (options) {\n\n  try {\n    const res = await fetch(options);\n    let data = _.get(res, 'data', {});\n\n    /* convert list to object */\n    if (_.isArray(data)) {\n      data = { list: data };\n    }\n\n    return data;\n  } catch (error) {\n\n    // throw new Error(error.message);\n    throw new CustomError(error);\n    //   throw error;\n  }\n}"]},"metadata":{},"sourceType":"module"}