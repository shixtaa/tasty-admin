{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { showLoading, hideLoading } from '../../../../../Redux/Reducer/loading';\nimport { message } from 'antd';\nimport { menu } from '../../../../../Request/menu';\nimport { restaurant } from '../../../../../Request/restaurant';\nimport _ from 'lodash';\nexport const meunSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    isLoading: false,\n    list: [],\n    count: 0,\n    restaurantNames: []\n  },\n  reducers: {\n    loadRestaurantName: (state, action) => {\n      state.restaurantNames = action.payload;\n    }\n  }\n});\nexport const {\n  loadRestaurantName\n} = meunSlice.actions;\nexport const getRestaurantName = () => async dispatch => {\n  try {\n    await dispatch(showLoading());\n    let result = await restaurant();\n\n    let nameList = _.map(result, item => {\n      return {\n        id: item._id,\n        name: item.name['zh-CN']\n      };\n    });\n\n    await dispatch(loadRestaurantName(nameList));\n  } catch (error) {\n    message.error(error.message);\n  } finally {\n    await dispatch(hideLoading());\n  }\n};\nexport const getMenu = () => async dispatch => {\n  try {\n    await dispatch(showLoading());\n    let result = await menu();\n\n    let nameList = _.map(result, item => {\n      return {\n        id: item._id,\n        name: item.name['zh-CN']\n      };\n    });\n\n    await dispatch(loadRestaurantName(nameList));\n  } catch (error) {\n    message.error(error.message);\n  } finally {\n    await dispatch(hideLoading());\n  }\n};\nexport default meunSlice.reducer;","map":{"version":3,"sources":["/Users/shixt/Documents/user/最终项目/tasty-admin/src/Features/Admin/Components/Menu/state/reducer.js"],"names":["createSlice","showLoading","hideLoading","message","menu","restaurant","_","meunSlice","name","initialState","isLoading","list","count","restaurantNames","reducers","loadRestaurantName","state","action","payload","actions","getRestaurantName","dispatch","result","nameList","map","item","id","_id","error","getMenu","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,EAAqBC,WAArB,QAAwC,sCAAxC;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,IAAT,QAAqB,6BAArB;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;AACnCQ,EAAAA,IAAI,EAAE,SAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAC,KADE;AAEZC,IAAAA,IAAI,EAAC,EAFO;AAGZC,IAAAA,KAAK,EAAC,CAHM;AAIZC,IAAAA,eAAe,EAAC;AAJJ,GAFqB;AAQnCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,EAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACjCD,MAAAA,KAAK,CAACH,eAAN,GAAwBI,MAAM,CAACC,OAA/B;AACD;AAHO;AARyB,CAAD,CAA7B;AAgBP,OAAO,MAAM;AAAEH,EAAAA;AAAF,IAAyBR,SAAS,CAACY,OAAzC;AAEP,OAAO,MAAMC,iBAAiB,GAAG,MAAM,MAAQC,QAAR,IAAoB;AACzD,MAAI;AACF,UAAMA,QAAQ,CAACpB,WAAW,EAAZ,CAAd;AACA,QAAIqB,MAAM,GAAG,MAAMjB,UAAU,EAA7B;;AACA,QAAIkB,QAAQ,GAAGjB,CAAC,CAACkB,GAAF,CAAMF,MAAN,EAAcG,IAAD,IAAQ;AAClC,aAAO;AAAEC,QAAAA,EAAE,EAACD,IAAI,CAACE,GAAV;AAAcnB,QAAAA,IAAI,EAACiB,IAAI,CAACjB,IAAL,CAAU,OAAV;AAAnB,OAAP;AACD,KAFc,CAAf;;AAGA,UAAMa,QAAQ,CAACN,kBAAkB,CAACQ,QAAD,CAAnB,CAAd;AACD,GAPD,CAOE,OAAOK,KAAP,EAAc;AACdzB,IAAAA,OAAO,CAACyB,KAAR,CAAcA,KAAK,CAACzB,OAApB;AACD,GATD,SASQ;AACN,UAAMkB,QAAQ,CAACnB,WAAW,EAAZ,CAAd;AACD;AACF,CAbM;AAeP,OAAO,MAAM2B,OAAO,GAAG,MAAM,MAAQR,QAAR,IAAoB;AAC/C,MAAI;AACF,UAAMA,QAAQ,CAACpB,WAAW,EAAZ,CAAd;AACA,QAAIqB,MAAM,GAAG,MAAMlB,IAAI,EAAvB;;AACA,QAAImB,QAAQ,GAAGjB,CAAC,CAACkB,GAAF,CAAMF,MAAN,EAAcG,IAAD,IAAQ;AAClC,aAAO;AAAEC,QAAAA,EAAE,EAACD,IAAI,CAACE,GAAV;AAAcnB,QAAAA,IAAI,EAACiB,IAAI,CAACjB,IAAL,CAAU,OAAV;AAAnB,OAAP;AACD,KAFc,CAAf;;AAGA,UAAMa,QAAQ,CAACN,kBAAkB,CAACQ,QAAD,CAAnB,CAAd;AACD,GAPD,CAOE,OAAOK,KAAP,EAAc;AACdzB,IAAAA,OAAO,CAACyB,KAAR,CAAcA,KAAK,CAACzB,OAApB;AACD,GATD,SASQ;AACN,UAAMkB,QAAQ,CAACnB,WAAW,EAAZ,CAAd;AACD;AACF,CAbM;AAeP,eAAeK,SAAS,CAACuB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { showLoading,hideLoading } from '../../../../../Redux/Reducer/loading';\nimport { message } from 'antd';\nimport { menu } from '../../../../../Request/menu';\nimport { restaurant } from '../../../../../Request/restaurant';\nimport _ from 'lodash';\n\nexport const meunSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    isLoading:false,\n    list:[],\n    count:0,\n    restaurantNames:[]\n  },\n  reducers: {\n    loadRestaurantName:(state,action)=>{\n      state.restaurantNames = action.payload;\n    }\n\n  },\n});\n\nexport const { loadRestaurantName } = meunSlice.actions;\n\nexport const getRestaurantName = () => async ( dispatch)=> {\n  try {\n    await dispatch(showLoading());\n    let result = await restaurant();\n    let nameList = _.map(result,(item)=>{\n      return { id:item._id,name:item.name['zh-CN'] };\n    });\n    await dispatch(loadRestaurantName(nameList));\n  } catch (error) {\n    message.error(error.message);\n  }finally{\n    await dispatch(hideLoading());\n  }\n};\n\nexport const getMenu = () => async ( dispatch)=> {\n  try {\n    await dispatch(showLoading());\n    let result = await menu();\n    let nameList = _.map(result,(item)=>{\n      return { id:item._id,name:item.name['zh-CN'] };\n    });\n    await dispatch(loadRestaurantName(nameList));\n  } catch (error) {\n    message.error(error.message);\n  }finally{\n    await dispatch(hideLoading());\n  }\n};\n\nexport default meunSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}