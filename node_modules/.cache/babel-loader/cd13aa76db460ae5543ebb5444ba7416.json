{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shixt/Documents/user/\\u6700\\u7EC8\\u9879\\u76EE/tasty-admin/src/Features/Admin/Components/Restaurant/Component/ModalBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Form, Input, Select, Tag } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\n/* actions */\n\nimport { setEn, setZh } from '../state/reducer'; // import { saveItem } from '../../../State/action';\n\n/* lodash */\n\nimport _ from 'lodash'; // import { saveItem } from '../../../State/action';\n\nconst {\n  Option\n} = Select;\nexport default function ModalBox() {\n  _s();\n\n  const language = useSelector(state => state.language.lang);\n  const tags = useSelector(state => state.restaurant.tags);\n  const selectedList = useSelector(state => state.restaurant.selectedItem);\n  console.log(selectedList);\n  const dispatch = useDispatch();\n  const [inputValue, setInputValue] = useState(selectedList.newName);\n  const [tagList, setTagList] = useState([]);\n  const inputRef = useRef();\n\n  async function changeLang(value) {\n    if (value == 'zh-CN') {\n      await dispatch(setZh());\n    } else {\n      await dispatch(setEn());\n    }\n\n    setInputValue(selectedList.name[`${language}`]);\n  }\n\n  useEffect(() => {\n    setTagList(selectedList.tags);\n  }, []);\n  useEffect(async () => {\n    await setInputValue(selectedList.name[`${language}`]);\n    inputRef.current.state.value = inputValue;\n  }, [language, inputValue]);\n\n  function renderTagList() {\n    return _.map(tags, item => {\n      return /*#__PURE__*/_jsxDEV(Option, {\n        value: item,\n        children: item\n      }, Math.random(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  function changeTag(value) {\n    let cloneList = _.cloneDeep(tagList);\n\n    cloneList.push(value);\n    setTagList(cloneList);\n  }\n\n  function renderTags() {\n    return tagList.map(tag => {\n      let color = tag.length > 5 ? 'geekblue' : 'green';\n\n      if (tag === 'loser') {\n        color = 'volcano';\n      }\n\n      return /*#__PURE__*/_jsxDEV(Tag, {\n        color: color,\n        children: tag.toUpperCase()\n      }, Math.random(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"\\u9910\\u9986\\u540D\\u79F0\\uFF1A\",\n        children: /*#__PURE__*/_jsxDEV(Input.Group, {\n          compact: true,\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            name: ['name', 'province'],\n            noStyle: true,\n            rules: [{\n              required: true,\n              message: 'Province is required'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              style: {\n                width: '80px'\n              },\n              defaultValue: language,\n              onChange: value => {\n                changeLang(value);\n              },\n              children: [/*#__PURE__*/_jsxDEV(Option, {\n                value: \"zh-CN\",\n                children: \"\\u4E2D\\u6587\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Option, {\n                value: \"en-US\",\n                children: \"\\u82F1\\u6587\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: ['address', 'street'],\n            noStyle: true,\n            rules: [{\n              required: true,\n              message: 'Street is required'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              style: {\n                width: '50%'\n              },\n              placeholder: \"Input value\",\n              ref: inputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"\\u9910\\u9986\\u6807\\u7B7E\\uFF1A\",\n        children: /*#__PURE__*/_jsxDEV(Input.Group, {\n          compact: true,\n          children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n            name: ['tags', 'province'],\n            noStyle: true,\n            rules: [{\n              required: true,\n              message: 'Province is required'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              style: {\n                width: '120px'\n              },\n              defaultValue: tags[0],\n              onChange: value => {\n                changeTag(value);\n              },\n              children: renderTagList()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: renderTags()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ModalBox, \"RnejOeNYJ9KHmFCBosf50vvLk6I=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = ModalBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalBox\");","map":{"version":3,"sources":["/Users/shixt/Documents/user/最终项目/tasty-admin/src/Features/Admin/Components/Restaurant/Component/ModalBox.js"],"names":["React","useState","useEffect","useRef","Form","Input","Select","Tag","useDispatch","useSelector","setEn","setZh","_","Option","ModalBox","language","state","lang","tags","restaurant","selectedList","selectedItem","console","log","dispatch","inputValue","setInputValue","newName","tagList","setTagList","inputRef","changeLang","value","name","current","renderTagList","map","item","Math","random","changeTag","cloneList","cloneDeep","push","renderTags","tag","color","length","toUpperCase","required","message","width"],"mappings":"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","sourcesContent":["import React,{ useState,useEffect, useRef } from 'react';\nimport { Form, Input, Select ,Tag } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\n/* actions */\nimport { setEn,setZh } from '../state/reducer';\n// import { saveItem } from '../../../State/action';\n\n/* lodash */\nimport _ from 'lodash';\n// import { saveItem } from '../../../State/action';\n\nconst { Option } = Select;\n\nexport default function ModalBox () {\n  const language = useSelector(state=>state.language.lang);\n  const tags = useSelector(state=>state.restaurant.tags);\n  const selectedList = useSelector(state=>state.restaurant.selectedItem);\n\n  console.log(selectedList);\n  const dispatch = useDispatch();\n  const [ inputValue,setInputValue ] = useState(selectedList.newName);\n  const [ tagList,setTagList ] = useState([]);\n\n  const inputRef = useRef();\n\n  async function changeLang (value){\n    if(value == 'zh-CN'){\n      await dispatch(setZh());\n    }else{\n      await dispatch(setEn());\n    }\n    setInputValue(selectedList.name[`${language}`]);\n  }\n\n  useEffect(()=>{\n    setTagList(selectedList.tags);\n  },[]);\n\n  useEffect( async ()=>{\n\n    await setInputValue(selectedList.name[`${language}`]);\n\n    inputRef.current.state.value = inputValue;\n\n  },[ language,inputValue ]);\n\n  function renderTagList (){\n    return _.map(tags,(item)=>{\n      return (\n        <Option value={ item } key={ Math.random() }>{item}</Option>\n      );\n    });\n  }\n\n  function changeTag (value){\n    let cloneList = _.cloneDeep(tagList);\n    cloneList.push(value);\n    setTagList(cloneList);\n  }\n\n  function renderTags (){\n    return tagList.map(tag => {\n      let color = tag.length > 5 ? 'geekblue' : 'green';\n      if (tag === 'loser') {\n        color = 'volcano';\n      }\n      return (\n        <Tag color={ color } key={ Math.random() }>\n          {tag.toUpperCase()}\n        </Tag>\n      );\n    });}\n\n  return (\n    <div>\n      <Form>\n        <Form.Item label=\"餐馆名称：\">\n          <Input.Group compact>\n            <Form.Item\n              name={ [ 'name', 'province' ] }\n              noStyle\n              rules={ [ { required: true, message: 'Province is required' } ] }\n            >\n              <Select style={{ width :'80px' }} defaultValue={ language } onChange={ (value)=>{changeLang(value); } }>\n                <Option value=\"zh-CN\" >中文</Option>\n                <Option value=\"en-US\" >英文</Option>\n              </Select>\n            </Form.Item>\n\n            <Form.Item\n              name={ [ 'address', 'street' ] }\n              noStyle\n              rules={ [ { required: true, message: 'Street is required' } ] }\n            >\n              <Input style={{ width : '50%' }} placeholder=\"Input value\" ref={ inputRef }  />\n            </Form.Item>\n          </Input.Group>\n        </Form.Item>\n        <Form.Item label=\"餐馆标签：\">\n          <Input.Group compact>\n            <Form.Item\n              name={ [ 'tags', 'province' ] }\n              noStyle\n              rules={ [ { required: true, message: 'Province is required' } ] }\n            >\n              <Select style={{ width :'120px' }} defaultValue={ tags[0] } onChange={ (value)=>{changeTag(value);} }>\n                {renderTagList()}\n              </Select>\n            </Form.Item>\n            <Form.Item>\n              <div>\n                {renderTags()}\n              </div>\n            </Form.Item>\n          </Input.Group>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}